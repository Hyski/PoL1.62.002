#if !defined(__MARKER_INCLUDED__)
#define __MARKER_INCLUDED__

/////////////////////////////////////////////////////////////////////////
//	MiST land Lybrary files
#include <mll/algebra/point3.h>
/////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
using mll::algebra::point3;
/////////////////////////////////////////////////////////////////////////

namespace mll 
{ 

namespace debug 
{


class line
{
public:

	point3 m_a;
	point3 m_b;

	line(const point3& a,const point3& b) : m_a(a),m_b(b) {}

};

//=====================================================================================//
//                                    class marker                                     //
//=====================================================================================//
class marker
{
public:

	/////////////////////////////////////////////////////////////////////////
	//	тип отображения
	enum marker_type
	{
		mt_point,									//	отображается точкой
		mt_x,										//	отображается иксом
		mt_plus										//	отображается плюсом
	};
	////////////////////////////////////////////////////////////////////////

private:
	marker_type m_mt;								//	тип маркера
	point3 m_origin;								//	позиция маркера
public:

	/////////////////////////////////////////////////////////////////////////
	//	конструктор по умолчанию
	marker();
	/////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////
	//	конструктор копирования
	marker(const marker& m);
	/////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////
	//	конструктор по параметрам
	marker(marker_type mt,const point3& origin);
	/////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////
	//	виртуальный деструктор
	virtual ~marker();
	/////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////
	//	получить тип маркера
	marker_type get_type(void) const;
	/////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////
	//	установить тип маркера
	void set_type(marker_type mt);
	/////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////
	//	получить месторасположение
	const point3& get_origin(void) const;
	/////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////
	//	установить месторасположение
	void set_origin(const point3& origin);
	/////////////////////////////////////////////////////////////////////////

};

/////////////////////////////////////////////////////////////////////////
//	конструктор по умолчанию
inline marker::marker() : m_mt(mt_point)
{
}
/////////////////////////////////////////////////////////////////////////
//	конструктор копирования
inline marker::marker(const marker& m) : m_mt(m.m_mt),m_origin(m.m_origin)
{
}
/////////////////////////////////////////////////////////////////////////
//	конструктор по параметрам
inline marker::marker(marker_type mt,const point3& origin) : m_mt(mt),m_origin(origin)
{
}
/////////////////////////////////////////////////////////////////////////
//	виртуальный деструктор
inline marker::~marker()
{
}
/////////////////////////////////////////////////////////////////////////
//	получить/установить тип маркера
inline marker::marker_type marker::get_type(void) const
{
	return m_mt;
}

inline void marker::set_type(marker_type mt)
{
	m_mt = mt;
}
/////////////////////////////////////////////////////////////////////////
//	получить месторасположение
inline const point3& marker::get_origin(void) const
{
	return m_origin;
}
/////////////////////////////////////////////////////////////////////////
//	установить месторасположение
inline void marker::set_origin(const point3& origin)
{
	m_origin = origin;
}
/////////////////////////////////////////////////////////////////////////

}	//	namespace debug

}	//	namespace mll

#endif